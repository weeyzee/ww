const express = require('express');
const path = require('path');
const fs = require('fs');//----------------------------------------------------------------------------
const bcrypt = require('bcrypt');
const session = require('express-session');
const nodemailer = require('nodemailer');
const http = require('http'); // –î–æ–±–∞–≤–ª—è–µ–º http –¥–ª—è WebSocket
const { Server } = require('socket.io'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º Socket.io
const cookieParser = require('cookie-parser'); //—ç—Ç–æ middleware, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–±–∏—Ä–∞–µ—Ç –∫—É–∫–∏, —á—Ç–æ–±—ã express-session –º–æ–≥ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.
const sharedSession = require('express-socket.io-session'); //–ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª—è—Ç—å —Å–µ—Å—Å–∏–∏ –º–µ–∂–¥—É Express –∏ Socket.io, —Ç.–µ. —á–∞—Ç –±—É–¥–µ—Ç –ø–æ–Ω–∏–º–∞—Ç—å, –∫–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.


const app = express()

app.set('view engine', 'ejs')

const server = http.createServer(app); // –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
const io = new Server(server); // –ü–µ—Ä–µ–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤ WebSocket

// Middleware ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É. –û–Ω–∏ –º–æ–≥—É—Ç:

// –ò–∑–º–µ–Ω—è—Ç—å –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ (req) –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞ (res)
// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ (–∑–∞–∫–∞–Ω—á–∏–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É)
// –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É middleware –≤ —Ü–µ–ø–æ—á–∫–µ
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏
app.use(express.urlencoded({extended: false})) //–ß—Ç–æ–±—ã Express –º–æ–≥ —á–∏—Ç–∞—Ç—å req.body, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å middleware (–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –ü–û)//–ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ <form> –≤ HTML
app.use(express.static('public'))
// app.use(session({
//     secret: 'mySecretKey',  // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–π
//     resave: false,          //–ï—Å–ª–∏ false, —Å–µ—Å—Å–∏—è –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –≤ –Ω–µ–π –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–ª–æ—Å—å.
//     saveUninitialized: false,   //–ï—Å–ª–∏ false, —Å–µ—Ä–≤–µ—Ä –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–µ—Å—Å–∏—é, –ø–æ–∫–∞ –≤ –Ω–µ–µ –Ω–µ –∑–∞–ø–∏—à—É—Ç –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
//     cookie: { secure: false }  // `true`, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å HTTPS//false –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫—É–∫–∏ (—Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏) –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –±–µ–∑ HTTPS. –ï—Å–ª–∏ true, —Ç–æ –Ω—É–∂–Ω—ã –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (HTTPS).
// }));

const sessionMiddleware = session({
    secret: 'mySecretKey',
    resave: false,
    saveUninitialized: false,
    cookie: { secure: false }
});

app.use(cookieParser());
app.use(sessionMiddleware);

// –ú—ã –≤—ã–Ω–µ—Å–ª–∏ middleware —Å–µ—Å—Å–∏–π (sessionMiddleware) –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.
// –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –≤ Express, –Ω–æ –∏ –≤ Socket.io (–Ω–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —ç—Ç–æ—Ç middleware WebSocket-—Å–µ—Ä–≤–µ—Ä—É).
// –î–æ–±–∞–≤–ª–µ–Ω cookieParser() –ø–µ—Ä–µ–¥ sessionMiddleware.
// express-session –Ω–µ —É–º–µ–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏—Ä–∞—Ç—å –∫—É–∫–∏, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è session ID.
// cookie-parser –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –º–æ–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —á–∏—Ç–∞—Ç—å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—É–∫.

app.use((req, res, next) => {
    res.locals.user = req.session.user;  // –î–µ–ª–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤
    next();
});

const USERS_FILE = path.join(__dirname, 'users.json');

const ADMIN_CREDENTIALS = {
    username: 'admin',
    password: 'admin123' // –ú–æ–∂–Ω–æ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ —Ç–∞–∫
};

io.use(sharedSession(sessionMiddleware, { autoSave: true }));
//io.use(...) ‚Äì –¥–æ–±–∞–≤–ª—è–µ—Ç middleware –≤ Socket.io.
// sharedSession(sessionMiddleware, { autoSave: true }) –¥–µ–ª–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ:
// –°–≤—è–∑—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏–∏ –º–µ–∂–¥—É HTTP (Express) –∏ WebSocket (Socket.io).
// autoSave: true ‚Äì –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏.

// === –í–µ–±–°–æ–∫–µ—Ç-—Å–µ—Ä–≤–µ—Ä === //
io.on('connection', (socket) => {
    console.log('üîµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è');

    const username = socket.handshake.session.user || '–ì–æ—Å—Ç—å';//
    //–≠—Ç–æ –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –∫–ª–∏–µ–Ω—Ç–∞, –≤ —Ç–æ–º —á–∏—Å–ª–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤–æ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è WebSocket. 
    // –í —ç—Ç–æ–º –æ–±—ä–µ–∫—Ç–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –∫—É–∫–∏.

    socket.on('chat message', (msg) => {
        io.emit('chat message', { username, text: msg });
        console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username}: ${msg}`);
    });

    socket.on('disconnect', () => {
        console.log('üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
    });
});

const transporter = nodemailer.createTransport({  //—Å–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º —á–µ—Ä–µ–∑ SMTP.transporter ‚Äî –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º.
    host: "smtp.gmail.com", // SMTP-—Å–µ—Ä–≤–µ—Ä Mail.ru //–≠—Ç–æ –∞–¥—Ä–µ—Å –ø–æ—á—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å–µ–º.
    port: 587,            // –ü–æ—Ä—Ç (465 –¥–ª—è SSL, 587 –¥–ª—è TLS)
    secure: false,         // true –¥–ª—è 465, false –¥–ª—è 587
    auth: {     //–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Mail.ru
        user: "mr.danik561@gmail.com",    // –í–ê–® –ü–û–ß–¢–û–í–´–ô –Ø–©–ò–ö
        pass: "nflg mres rukf edwy"          // –ü–ê–†–û–õ–¨ –û–¢ –ü–û–ß–¢–´ –ò–õ–ò –ü–ê–†–û–õ–¨ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
const sendEmail = async (email, username) => {
    try {
        let info = await transporter.sendMail({ //–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä.info ‚Äî –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∏—Å—å–º–µ 
            from: '"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∞–π—Ç–∞" <mr.danik561@gmail.com>', // –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
            to: email,            // –ü–æ–ª—É—á–∞—Ç–µ–ª—å
            subject: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ${username}!`,            // –¢–µ–º–∞ –ø–∏—Å—å–º–∞
            html: "<b>–ü—Ä–∏–≤–µ—Ç!</b> –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –∏–∑ <i>Node.js</i>!" // HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ
        });

        console.log("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ", info.messageId);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ", error);
    }
};
// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
const loadUsers = () => {
    try {
        const data = fs.readFileSync(USERS_FILE, 'utf8');
        return JSON.parse(data);
    } catch (err) {
        return [];
    }
};

const saveUsers = (users) => {
    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2), 'utf8');
};

let users = loadUsers();

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
app.get('/register', (req, res) => {
    res.render('register');
});

app.get('/chat', (req, res) => {
    res.render('chat'); 
});

//----------------------------------------------------------------------------
app.post('/register', async (req, res) => {
    const { username, password, email } = req.body;  //–Ω–∞–∑–≤–∞–Ω–∏—è –≤ { username, password, email } –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å name="..." –≤ HTML-—Ñ–æ—Ä–º–µ.
    ////username=JohnDoe&password=secret123&email=johndoe@email.com
    if (users.find(u => u.username === username)) {             //array.find(element => —É—Å–ª–æ–≤–∏–µ)
        return res.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
    }
    const hashedPassword = await bcrypt.hash(password, 10);
    users.push({ username, password: hashedPassword, role: 'user', visits: 0, email}); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å 'user'
    saveUsers(users);
    res.redirect('/login');
});//----------------------------------------------------------------------------

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞
app.get('/login', (req, res) => {
    saveUsers(users);
    res.render('login');
});

//----------------------------------------------------------------------------
app.post('/login', async (req, res) => {
    const { username, password } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ö–æ–¥–∏—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if (username === ADMIN_CREDENTIALS.username && password === ADMIN_CREDENTIALS.password) {
        req.session.user = username;
        req.session.role = 'admin';
        return res.redirect('/');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const user = users.find(u => u.username === username);
    if (user && await bcrypt.compare(password, user.password)) {
        req.session.user = user.username;//—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏.–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: if (req.session.role === 'admin') {
        req.session.role = user.role;
        user.visits += 1;
        req.session.visits = user.visits;
        return res.redirect('/');
    } else {
        res.send('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    }
});
//----------------------------------------------------------------------------

app.get('/logout', (req, res) => {  
    req.session.destroy(() => {  
        res.redirect('/');
    });
});

app.get('/', (req, res) => {
    res.render('index', { user: req.session.user, role: req.session.role, visits: req.session.visits });
});


app.get('/about', (req, res) => {
    res.render('about') 
})

app.get('/user/:username/:id', (req, res) => {//–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞–µ—á–µ–Ω–∏
    let data = {username: req.params.username, hobbies: ['–§—É—Ç–±–æ–ª', '–°–∫–µ–π—Ç', '–±–∞—Å–∫–µ—Ç–±–æ–ª']}
    //res.send(`User ID: ${req.params.id}. User Name: ${req.params.username}`)
    res.render('user', data)//, {username: req.params.username, hobbies: ['–§—É—Ç–±–æ–ª', '–°–∫–µ–π—Ç', '–±–∞—Å–∫–µ—Ç–±–æ–ª']})//–æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–¥–∞—é—â–∏–π—Å—è –≤ ejs//—á–µ—Ä–µ–∑ : –∑–Ω–∞—á–µ–Ω–∏–µ (—Ç–æ —á—Ç–æ –≤ —Å—Å—ã–ª–∫—É username)
})

app.post('/check-user', (req, res) => {
    let username = req.body.username
    if (username == ""){
        return res.redirect('/')
    }
    else{
        return res.redirect('/user/' + username + '/4324234')
    }
})

app.post('/send-email', async (req, res) => {
    if (!req.session.user) {
        return res.status(401).send('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!');
    }

    const user = users.find(u => u.username === req.session.user);
    if (!user || !user.email) {
        return res.status(404).send('Email –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }

    try {
        await sendEmail(user.email, req.session.user); 
        res.redirect('/');
    } catch (error) {
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: ' + error.message);
    }

});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/admusers', (req, res) => {
    if (req.session.role !== 'admin') {
        return res.send('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!');
    }
    
    const users = loadUsers(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
    res.render('admusers', { users });
});

const PORT = 8070
// app.listen(PORT, () => {
//     console.log('üöÄ Server started: http://localhost:8070')
// })

// 1. app ‚Äì —ç—Ç–æ Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤)
// üîπ app ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç Express, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, app.get('/chat', ...)), —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏ —Å–µ—Å—Å–∏—è–º–∏. –û–Ω —Å–∞–º –ø–æ —Å–µ–±–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä, –∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã.

// 2. server ‚Äì —ç—Ç–æ HTTP-—Å–µ—Ä–≤–µ—Ä (–æ—Å–Ω–æ–≤–∞ –¥–ª—è WebSocket)
// üîπ server —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é http.createServer(app). –û–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∞–º —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å—ã, –∞ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏—Ö –≤ app.
// üîπ –ò–º–µ–Ω–Ω–æ server –Ω—É–∂–µ–Ω –¥–ª—è WebSocket, –ø–æ—Ç–æ–º—É —á—Ç–æ app.listen() —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å HTTP-–∑–∞–ø—Ä–æ—Å–∞–º–∏, –∞ WebSocket —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ http.Server.

// –ö–∞–∫ –æ–Ω–∏ —Å–≤—è–∑–∞–Ω—ã?
// Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (app) –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ (GET, POST, PUT, DELETE –∏ —Ç. –¥.).
// HTTP-—Å–µ—Ä–≤–µ—Ä (server) –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∞–º—É —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –∑–∞–ø—Ä–æ—Å—ã Express.
// WebSocket (io) –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ –∫ server, –∞ –Ω–µ –∫ app.
server.listen(PORT, () => {
    console.log(`üöÄ WebSocket –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
